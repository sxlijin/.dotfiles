#!/bin/bash
# ~/.bashrc: bash(1) individual per-interactive-shell startup file

# If not running interactively, don't do anything
[[ $- != *i* ]] && return

function dotfiles_root {
    this_src="$(readlink ${BASH_SOURCE[0]})"
    this_dir="$(dirname ${this_src})"
    test -L "${BASH_SOURCE[0]}" || this_dir="${this_dir}/.dotfiles"
    git_root="$(cd -P ${this_dir} && git rev-parse --show-toplevel)"
    echo "${git_root}"
}

# bash(1): A colon-separated list of values controlling how commands are saved
# on the history list. [...]  A value of ignoredups causes lines matching the
# previous history entry to not be saved.
HISTCONTROL=ignoredups:erasedups

# Unfortunately older versions of bash (as recent as 4.4) do not allow for
# negative values (pitfalls of being on Arch) so I'm just using 2^32-1.
#
# bash(1): The maximum number of lines contained in the history file. When this
# variable is assigned a value, the history file is truncated, if necessary, to
# contain no more than that number of lines [...] Non-numeric values and numeric
# values less than zero inhibit truncation. The shell sets the default value to
# the value of HISTSIZE after reading any startup files.
HISTFILESIZE=2147483647

# Unfortunately older versions of bash (as recent as 4.4) do not allow for
# negative values (pitfalls of being on Arch) so I'm just using 2^32-1.
#
# bash(1): The number of commands to remember in the command history (see
# HISTORY below).  [..] Numeric values less than zero result in every command
# being saved on the history list (there is no limit).
HISTSIZE=2147483647

# Apply ISO-8601 format timestamps to history.
HISTTIMEFORMAT="%FT%T%z "

# bash(1): If set, the history list is appended to the file named by the value
# of the HISTFILE variable when the shell exits, rather than overwriting the
# file.
shopt -s histappend

# bash(1): If set, bash checks the window size after each command and, if
# necessary, updates the values of LINES and COLUMNS.
shopt -s checkwinsize

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color|*-256color) color_prompt=yes;;
esac

# set fancy prompts on windows all the time
[[ $(uname -s) = *MINGW* ]] && color_prompt=yes

if [ "$color_prompt" = yes ]; then
    PS1='$(
           { exit_code="$?"; set +x; } 2>/dev/null;
           echo -n "\[\e[01;32m\]\u@\h\[\e[00m\]";
           echo -n ":"
           echo -n "\[\e[00;95m\]$(date "+%Y-%m-%dT%H:%M:%S%z")\[\e[00m\]"
           echo -n ":"
           echo -n "\[\e[01;34m\]\w\[\e[00m\]"
           echo -n "\[\e[01;36m\]$(__git_ps1)\[\e[00m\]"
           echo -n " "
           color_code="$( [ ${exit_code} == 0 ] && echo '33m' || echo '31m')";
           echo -n "\[\e[01;$color_code\][$exit_code]\[\e[00m\]";
           echo -n $"\n$ "
         )'
else
    PS1='$(
           { exit_code="$?"; set +x; } 2>/dev/null;
           echo -n "\u@\h";
           echo -n ":"
           echo -n "$(date "+%Y-%m-%dT%H:%M:%S%z")"
           echo -n ":"
           echo -n "\w"
           echo -n "$(__git_ps1)"
           echo -n " "
           echo -n "[$exit_code]";
           echo -n $"\n$ "
         )'
fi
unset color_prompt

PS4='++ $(date "+%Y-%m-%dT%H:%M:%S%z") ++ '

# Set up homebrew if we're in macOS
[ -s "/opt/homebrew/bin/brew" ] && eval "$(/opt/homebrew/bin/brew shellenv)"

# set LS_COLORS
command -v dircolors >/dev/null \
  && eval $(dircolors -b "$(dotfiles_root)/dircolors") \
  || eval $(gdircolors -b "$(dotfiles_root)/dircolors")

# set up vcxsrv correctly
(uname -r | grep --silent WSL2) \
    && export DISPLAY="$(ip route show default | awk '{print $3 }'):0.0"

export EDITOR=vim

# disable flow control so C-s can be used to search forward
stty -ixon

# if ruby installed, add ruby path to $PATH
(hash ruby > /dev/null 2>&1) \
    && export PATH="$(ruby -e 'print Gem.user_dir')/bin:$PATH:$HOME/.rvm/bin" \
    || :

# Load RVM into a shell session *as a function*
[ -s "$HOME/.rvm/scripts/rvm" ] && . "$HOME/.rvm/scripts/rvm" || :

# Load cargo
[ -s "$HOME/.cargo/env" ] && . "$HOME/.cargo/env" || :

# set up git autocompletion
. "$(dotfiles_root)/git/git-completion.bash"
__git_complete g _git

# source the git ps1
. "$(dotfiles_root)/git/git-prompt.sh"

# configure https://direnv.net/
[ -s "/usr/bin/direnv" ] && eval "$(direnv hook bash)" || :

if [ -n "${PROMPT_COMMAND}" ]
then
  # Strip trailing command delimiter from PROMPT_COMMAND using parameter
  # expansion.  Bash does not consider consecutive command delimiters legal, so
  # we don't have to worry about replacing ;*$.
  PROMPT_COMMAND="{ set +x; } 2>/dev/null; ${PROMPT_COMMAND/%;/}; set -x"
fi

# macOS ships with ncurses 5.7, which is too old to support TERM=tmux-256color
# As a result, it needs to get backported; see link for details:
# https://gpanders.com/blog/the-definitive-guide-to-using-tmux-256color-on-macos/
#
# The summary is that you need to run the following:
#
#   /opt/homebrew/opt/ncurses/bin/infocmp -x tmux-256color > /tmp/tmux-256color.src
#   sed -i "s/pairs#0x10000/pairs#0x01000/" /tmp/tmux-256color.src
#   /usr/bin/tic -x -o $HOME/.local/share/terminfo /tmp/tmux-256color.src
#
# Symlinking against /opt/homebrew/opt/ncurses/lib/terminfo doesn't work even
# though the `tic` command appears to do the same thing... so :shrug:
[ -s "${HOME}/.local/share/terminfo" ] \
  && export TERMINFO_DIRS="${HOME}/.local/share/terminfo"

if [ -s ~/.bash_aliases ]
then
  . ~/.bash_aliases
fi

if [ -s ~/.bash_locals ]
then
  . ~/.bash_locals
fi

# THIS IS NOT YET COMMITTED. AM USING THIS CONFIG TO TRY THINGS OUT.
#
# kinda nasty way to silence tracing during tab-completion
#SUPPRESS_TRACING_REWRITE="s|^{|{\n    { set +x; } 2>/dev/null;|;s|^}|    set -x;\n}|"
#eval "$(declare -f _completion_loader | sed "$SUPPRESS_TRACING_REWRITE")"
#eval "$(declare -f _minimal           | sed "$SUPPRESS_TRACING_REWRITE")"
#eval "$(declare -f _longopt           | sed "$SUPPRESS_TRACING_REWRITE")"
#unset SUPPRESS_TRACING_REWRITE
# We *could* apply various hacks to make command tracing work nicely with the
# various tab completions that bash comes with, but honestly? I don't use any
# of them, so I just throw them all away.
complete -r

export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"

set -x
