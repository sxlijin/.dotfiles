#!/bin/bash
# ~/.bashrc: bash(1) individual per-interactive-shell startup file

# If not running interactively, don't do anything
[[ $- != *i* ]] && return

function dotfiles_root {
    this_src="$(readlink -f ${BASH_SOURCE[0]})"
    this_dir="$(dirname ${this_src})"
    test -L "${BASH_SOURCE[0]}" || this_dir="${this_dir}/.dotfiles"
    git_root="$(cd -P ${this_dir} && git rev-parse --show-toplevel)"
    echo "${git_root}"
}

# bash(1): A colon-separated list of values controlling how commands are saved
# on the history list. [...]  A value of ignoredups causes lines matching the
# previous history entry to not be saved.
HISTCONTROL=ignoredups:erasedups

# Unfortunately older versions of bash (as recent as 4.4) do not allow for
# negative values (pitfalls of being on Arch) so I'm just using 2^32-1.
#
# bash(1): The maximum number of lines contained in the history file. When this
# variable is assigned a value, the history file is truncated, if necessary, to
# contain no more than that number of lines [...] Non-numeric values and numeric
# values less than zero inhibit truncation. The shell sets the default value to
# the value of HISTSIZE after reading any startup files.
HISTFILESIZE=2147483647

# Unfortunately older versions of bash (as recent as 4.4) do not allow for
# negative values (pitfalls of being on Arch) so I'm just using 2^32-1.
#
# bash(1): The number of commands to remember in the command history (see
# HISTORY below).  [..] Numeric values less than zero result in every command
# being saved on the history list (there is no limit).
HISTSIZE=2147483647

# Apply ISO-8601 format timestamps to history.
HISTTIMEFORMAT="%FT%T%z "

# bash(1): If set, the history list is appended to the file named by the value
# of the HISTFILE variable when the shell exits, rather than overwriting the
# file.
shopt -s histappend

# bash(1): If set, bash checks the window size after each command and, if
# necessary, updates the values of LINES and COLUMNS.
shopt -s checkwinsize

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color|*-256color) color_prompt=yes;;
esac

# set fancy prompts on windows all the time
[[ $(uname -s) = *MINGW* ]] && color_prompt=yes

PS1=''
if [ "$color_prompt" = yes ]; then
    PS1+='\[\e[01;32m\]\u@\h\[\e[00m\]'
    PS1+=':'
    PS1+='\[\e[00;95m\]$({ set +x; } 2>/dev/null; date --iso-8601=seconds)\[\e[00m\]'
    PS1+=':'
    PS1+='\[\e[01;34m\]\w\[\e[00m\]'
    PS1+='\[\e[01;36m\]$({ set +x; } 2>/dev/null; __git_ps1)\[\e[00m\]'
    PS1+=' '
    PS1+='$(
           { set +x; } 2>/dev/null;
           exit_code="$?";
           color_code="01;$( [ ${exit_code} == 0 ] && echo '33m' || echo '31m')";
           echo "\[\e[$color_code\][$exit_code]\[\e[00m\]"
         )'
    PS1+=$'\n\$ '
else
    PS1+='\u@\h:$({ set +x; } 2>/dev/null; date --iso-8601=seconds):\w$({ set +x; } 2>/dev/null; __git_ps1) [$?]'$'\n\$ '
fi
unset color_prompt

PS4='++ $(date --iso-8601=seconds) ++ '

# set LS_COLORS
eval $(dircolors -b "$(dotfiles_root)/dircolors")

export EDITOR=vim

# disable flow control so C-s can be used to search forward
stty -ixon

# if ruby installed, add ruby path to $PATH
(hash ruby > /dev/null 2>&1) \
    && export PATH="$(ruby -e 'print Gem.user_dir')/bin:$PATH:$HOME/.rvm/bin" \
    || :

# Load RVM into a shell session *as a function*
[ -s "$HOME/.rvm/scripts/rvm" ] && . "$HOME/.rvm/scripts/rvm" || :

# Load cargo
[ -s "$HOME/.cargo/env" ] && . "$HOME/.cargo/env" || :

# set up git autocompletion
. "$(dotfiles_root)/git/git-completion.bash"
__git_complete g _git

# source the git ps1
. "$(dotfiles_root)/git/git-prompt.sh"

if [ -s ~/.bash_aliases ]
then
  . ~/.bash_aliases
fi

if [ -s ~/.bash_locals ]
then
  . ~/.bash_locals
fi

# THIS IS NOT YET COMMITTED. AM USING THIS CONFIG TO TRY THINGS OUT.
#
# kinda nasty way to silence tracing during tab-completion
#SUPPRESS_TRACING_REWRITE="s|^{|{\n    { set +x; } 2>/dev/null;|;s|^}|    set -x;\n}|"
#eval "$(declare -f _completion_loader | sed "$SUPPRESS_TRACING_REWRITE")"
#eval "$(declare -f _minimal           | sed "$SUPPRESS_TRACING_REWRITE")"
#eval "$(declare -f _longopt           | sed "$SUPPRESS_TRACING_REWRITE")"
#unset SUPPRESS_TRACING_REWRITE
# We *could* apply various hacks to make command tracing work nicely with the
# various tab completions that bash comes with, but honestly? I don't use any
# of them, so I just throw them all away.
complete -r

set -x
