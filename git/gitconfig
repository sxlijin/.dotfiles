[credential]
     helper = store
[push]
     default = simple
[core]
     editor = vim
     excludesfile = ~/.gitignore
[merge]
    conflictstyle = diff3
[pretty]
    me = format:%Cred%h%Creset %Cgreen(%cr)%Creset -%C(auto)%d%Creset %s
[alias]
# From https://github.com/git/git/blob/master/contrib/completion/git-completion.bash#L26-L30
#
# If you use complex aliases of form '!f() { ... }; f', you can use the null
# command ':' as the first command in the function body to declare the desired
# completion style.  For example '!f() { : git commit ; ... }; f' will
# tell the completion to use commit completion.  This also works with aliases
# of form "!sh -c '...'".  For example, "!sh -c ': git commit ; ... '".

     s = status

     a = add
     ai = "add --interactive"

     d = diff
     ds = "diff --stat"
     dc = "diff --cached"
     dsc = "diff --stat --cached"

     f = fetch

     c = commit
     ca = "commit --all"
     cam = "commit --amend"
     cane = "!cane() { : git commit ; git commit --amend --no-edit ; } && cane"

     p = push
     pf = "push --force"
     pm = "!pm() { : git push ; git p \"$@\" \"$(git symbolic-ref HEAD):$(git symbolic-ref --short HEAD)\" ; } && pm"
     pfm = "!git pm --force"
     pmf = "!git pfm"

     br = branch
     brd = "branch --delete"

     co = checkout
     cob = "checkout -b"

     ch = cherry-pick

     rb = rebase
     rbi = "rebase --interactive"

     lg =     "!lg() { : git log ; git log --pretty=me \"$@\" ; } && lg"
     lgn =   "!lgn() { : git log ; git lg -n 10        \"$@\" ; } && lgn"
     lgs =   "!lgs() { : git log ; git lg --stat       \"$@\" ; } && lgs"
     lgp =   "!lgp() { : git log ; git lg --patch      \"$@\" ; } && lgp"
     lgsp = "!lgsp() { : git log ; git lgs --patch     \"$@\" ; } && lgsp"

     rsh = "reset --hard"
     rsm = "reset"
     rss = "reset --soft"
